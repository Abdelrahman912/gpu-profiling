precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.PipeEndpoint, Pair{Symbol, Bool}})
precompile(Tuple{Type{REPL.Terminals.TTYTerminal}, String, Base.TTY, Base.IOContext{Base.PipeEndpoint}, Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.get), Base.IOContext{Base.PipeEndpoint}, Symbol, Bool})
precompile(Tuple{typeof(Base.unsafe_write), Base.IOContext{Base.PipeEndpoint}, Ptr{UInt8}, UInt64})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.displaysize), Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.something), REPL.LineEdit.Prompt, REPL.LineEdit.Prompt})
precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#156#212", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#156#212", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#155#211", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#155#211", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.PipeEndpoint}, UInt8})
precompile(Tuple{typeof(Base.MainInclude.include), String})
precompile(Tuple{Pkg.API.var"##activate#296", Bool, Bool, Base.IOContext{Base.PipeEndpoint}, typeof(Pkg.API.activate), String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Pkg.Types.var"#52#55"{String, String}, Array{Any, 1}})
precompile(Tuple{typeof(Base.collect_similar), Array{Any, 1}, Base.Generator{Array{Any, 1}, Pkg.Types.var"#52#55"{String, String}}})
precompile(Tuple{Pkg.Types.var"#52#55"{String, String}, Base.Dict{String, Any}})
precompile(Tuple{Type{Array{Dates.DateTime, 1}}, UndefInitializer, Tuple{Int64}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Dates.DateTime, 1}, Dates.DateTime, Base.Generator{Array{Any, 1}, Pkg.Types.var"#52#55"{String, String}}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, Union{Array{String, 1}, String}}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{UInt64, 1}}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Base.setup_stdio), Base.IOContext{Base.PipeEndpoint}, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Union{Base.Libc.RawFD, IO}, 1}, Base.PipeEndpoint, Int64})
precompile(Tuple{Type{Pkg.Registry.RegistryInstance}, String, String, Base.UUID, String, String, Base.Dict{Base.UUID, Pkg.Registry.PkgEntry}, Base.SHA1, Base.Dict{String, String}, Base.Dict{String, Base.UUID}})
precompile(Tuple{typeof(Pkg.Registry.download_default_registries), Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), T} where T<:Tuple}, Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :path, :pinned, :repo, :tree_hash, :version), Tuple{Base.UUID, String, Nothing, Bool, Pkg.Types.GitRepo, Nothing, Base.VersionNumber}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{typeof(Base.read), Base.PipeEndpoint})
precompile(Tuple{Type{NamedTuple{(:uuid, :name, :version, :tree_hash), T} where T<:Tuple}, Tuple{Base.UUID, String, Base.VersionNumber, Nothing}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:uuid, :name, :version, :tree_hash), Tuple{Base.UUID, String, Base.VersionNumber, Nothing}}, Type{Pkg.Types.PackageSpec}})
precompile(Tuple{Pkg.API.var"#239#270"{Bool, Pkg.Types.Context, String, String, String, String, Pkg.API.var"#ansi_moveup#267", Pkg.API.var"#color_string#266", Base.Event, Base.Event, Base.ReentrantLock, Array{Base.PkgId, 1}, Base.Dict{Base.PkgId, String}, Array{Base.PkgId, 1}, Base.Dict{Base.PkgId, Bool}, Base.Dict{Base.PkgId, Bool}, Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.Dict{Base.PkgId, String}, Array{Base.PkgId, 1}, Bool, Base.IOContext{Base.PipeEndpoint}}})
precompile(Tuple{Pkg.API.var"#245#276"{Bool, Bool, Pkg.Types.Context, Array{Task, 1}, Base.Dict{Base.PkgId, String}, Base.Dict{Base.PkgId, Base.GenericIOBuffer{Array{UInt8, 1}}}, Pkg.API.var"#color_string#266", Base.Event, Base.Event, Base.ReentrantLock, Array{Base.PkgId, 1}, Array{Base.PkgId, 1}, Base.Dict{Base.PkgId, String}, Array{Base.PkgId, 1}, Array{Base.PkgId, 1}, Base.Dict{Base.PkgId, Bool}, Base.Dict{Base.PkgId, Base.Event}, Base.Dict{Base.PkgId, Bool}, Array{Pkg.Types.PackageSpec, 1}, Base.Dict{Base.PkgId, String}, Base.Dict{Tuple{Base.PkgId, UInt128, String, String}, Bool}, Array{Base.PkgId, 1}, Bool, Base.IOContext{Base.PipeEndpoint}, Base.Semaphore, String, Array{String, 1}, Array{Base.PkgId, 1}, Base.PkgId}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, String}}, String})
precompile(Tuple{typeof(Base.invokelatest), Any})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(Base.first), Array{Any, 1}})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Base.Libc.Libdl.find_library), Array{String, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlopen), String})
precompile(Tuple{CUDA_Driver_jll.var"#driver_version#4", Any})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:throw_error,), Tuple{Bool}}, typeof(Base.Libc.Libdl.dlsym), Ptr{Nothing}, String})
precompile(Tuple{Type{Ref{Int32}}})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Int32}}, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Int32}}, Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.:(!=)), Int32, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Int32}})
precompile(Tuple{typeof(Base.divrem), Int32, Int64})
precompile(Tuple{typeof(Base.divrem), Int64, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{Base.CoreLogging.LogLevel}})
precompile(Tuple{typeof(Base.:(>=)), Base.CoreLogging.LogLevel, Base.CoreLogging.LogLevel})
precompile(Tuple{Base.Threads.var"#1#2"{NVTX.var"#15#threadsfor_fun#11"{NVTX.var"#15#threadsfor_fun#9#12"{NVTX.var"#8#10", Base.UnitRange{Int64}}}, Int64}})
precompile(Tuple{typeof(Requires.listenpkg), Any, Base.PkgId})
precompile(Tuple{typeof(Requires.loaded), Base.PkgId})
precompile(Tuple{typeof(Requires.callbacks), Base.PkgId})
precompile(Tuple{typeof(Core.Compiler.typeinf_ext_toplevel), Core.Compiler.NativeInterpreter, Core.MethodInstance})
precompile(Tuple{typeof(Core.Compiler.typeinf_ext_toplevel), Core.MethodInstance, UInt64})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), Core.Compiler.NativeInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.foreach), typeof(Base.invokelatest), Array{Function, 1}})
precompile(Tuple{RandomNumbers.var"#3#6"})
precompile(Tuple{typeof(Requires.withpath), Any, String})
precompile(Tuple{typeof(Base.task_local_storage)})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.something), String, String, Vararg{String}})
precompile(Tuple{RandomNumbers.var"#4#7"})
precompile(Tuple{typeof(Requires.err), Any, Module, String, String, Any})
precompile(Tuple{RandomNumbers.var"#5#8"})
precompile(Tuple{typeof(Base.isassigned), Base.RefValue{Symbol}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Symbol}, Symbol})
precompile(Tuple{typeof(Requires.withnotifications), Any, Vararg{Any}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.PkgId, 1}, Int64})
precompile(Tuple{typeof(AbstractFFTs.TestUtils.__init__)})
precompile(Tuple{typeof(CUDA_Runtime_jll.is_available)})
precompile(Tuple{typeof(CUDA_Driver_jll.is_available)})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Logging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{Array{UInt8, 1}}, Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{typeof(Base.write), Base.IOContext{Base.PipeEndpoint}, Array{UInt8, 1}})
precompile(Tuple{typeof(CUDA.rand), Int64, Int64, Int64})
precompile(Tuple{Type{CUDA.CUmemPoolProps_st}, CUDA.CUmemAllocationType_enum, CUDA.CUmemAllocationHandleType_enum, CUDA.CUmemLocation_st, Ptr{Nothing}, Int64, NTuple{56, UInt8}})
precompile(Tuple{Type{NamedTuple{(:skip_destroyed,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(CUDA.CURAND.handle_ctor), CUDA.CuContext})
precompile(Tuple{Type{Pair{A, B} where B where A}, CUDA.CuContext, CUDA.CURAND.RNG})
precompile(Tuple{typeof(Base.push!), Base.Set{Pair{CUDA.CuContext, CUDA.CURAND.RNG}}, Pair{CUDA.CuContext, CUDA.CURAND.RNG}})
precompile(Tuple{Type{NamedTuple{(:status, :id), T} where T<:Tuple}, Tuple{CUDA.CUstreamCaptureStatus_enum, Nothing}})
precompile(Tuple{typeof(Base.similar), CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.getindex), Array{Any, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#73#74"{Tuple{Expr, Expr, Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Symbol, 1}, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Array{Symbol, 1}, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Array{Any, 1}, 1}}})
precompile(Tuple{typeof(GPUCompiler.split_kwargs), Tuple{Expr, Expr}, Array{Symbol, 1}, Vararg{Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Array{Symbol, 1}, Array{Symbol, 1}, Array{Symbol, 1}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.indexed_iterate), NTuple{4, Array{Any, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NTuple{4, Array{Any, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.ntuple), Base.var"#73#74"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.hash), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, UInt64})
precompile(Tuple{typeof(Base.:(>=)), Base.VersionNumber})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.max)}, Type{Base.VersionNumber}})
precompile(Tuple{typeof(Base.:(∉)), Symbol, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.:(<)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(>)), UInt32, UInt32})
precompile(Tuple{typeof(Base.:(!=)), UInt32, UInt32})
precompile(Tuple{Type{NamedTuple{(:unoptimize_throw_blocks,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:inline_cost_threshold,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{LLVM.API.LLVMOpaqueError}}, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:allow_boxed,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Base.cconvert), Type, LLVM.API.LLVMLinkage})
precompile(Tuple{typeof(Base.cconvert), Type{UInt32}, LLVM.API.LLVMCallConv})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{LLVM.API.LLVMOpaqueValue}}, Ptr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:kernel, :name), T} where T<:Tuple}, Tuple{Bool, Nothing}})
precompile(Tuple{typeof(CUDA.threadIdx)})
precompile(Tuple{typeof(CUDA.initialize_rng_state)})
precompile(Tuple{Type{NamedTuple{(:kernel,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:optimize, :libraries, :validate), T} where T<:Tuple}, Tuple{Bool, Bool, Bool}})
precompile(Tuple{typeof(Base.convert), Type{Int64}, Int32})
precompile(Tuple{typeof(Base.axes), Base.HasLength})
precompile(Tuple{CUDA.var"##s10304#1158", Vararg{Any, 7}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1159#1165", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#1159#1165"}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Base.UnitRange{Int64}, CUDA.var"#1159#1165"}, Int64})
precompile(Tuple{typeof(Base.map), Base.ComposedFunction{typeof(Base.:(!)), CUDA.var"#1160#1166"}, Core.SimpleVector})
precompile(Tuple{Base.ComposedFunction{typeof(Base.:(!)), CUDA.var"#1160#1166"}, Type})
precompile(Tuple{Type{LLVM.Context}, Function})
precompile(Tuple{LLVM.var"##Context#12", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{LLVM.Context}, LLVM.Interop.var"#8#9"{DataType}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Context, 1}, LLVM.Context})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.Context, 1}})
precompile(Tuple{typeof(Base.last), Array{LLVM.Context, 1}})
precompile(Tuple{typeof(Base.cconvert), Type, LLVM.Context})
precompile(Tuple{typeof(Base.convert), Type{LLVM.Context}, LLVM.Context})
precompile(Tuple{Type{LLVM.VoidType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(LLVM.API.LLVMVoidTypeInContext), LLVM.Context})
precompile(Tuple{typeof(Base.pop!), Array{LLVM.Context, 1}})
precompile(Tuple{Type{LLVM.StructType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.PointerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.ArrayType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.IntegerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{typeof(Base.Iterators.zip), Core.SimpleVector, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#1162#1168", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1161#1167", Base.Iterators.Filter{CUDA.var"#1162#1168", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Type}, Base.Generator{Base.Iterators.Filter{CUDA.var"#1162#1168", Base.Iterators.Zip{Tuple{Core.SimpleVector, Array{Any, 1}}}}, CUDA.var"#1161#1167"}})
precompile(Tuple{typeof(Base.Iterators.zip), NTuple{6, Expr}, Array{Any, 1}})
precompile(Tuple{Type{Base.Iterators.Filter{F, I} where I where F}, CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{6, Expr}, Array{Any, 1}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.var"#1163#1169", Base.Iterators.Filter{CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{6, Expr}, Array{Any, 1}}}}})
precompile(Tuple{typeof(Base.collect), Type{Union{Expr, Symbol}}, Base.Generator{Base.Iterators.Filter{CUDA.var"#1164#1170", Base.Iterators.Zip{Tuple{NTuple{6, Expr}, Array{Any, 1}}}}, CUDA.var"#1163#1169"}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Type, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Type, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Type, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.pushfirst!), Array{Type, 1}, Type})
precompile(Tuple{typeof(Base.pushfirst!), Array{Union{Expr, Symbol}, 1}, Expr})
precompile(Tuple{typeof(Base.setindex!), Array{Symbol, 1}, Symbol, Int64})
precompile(Tuple{typeof(Base.cconvert), Type{Ptr{Ptr{Nothing}}}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(Base.unsafe_convert), Type{Ptr{Ptr{Nothing}}}, Ptr{Ptr{Nothing}}})
precompile(Tuple{typeof(Main.rmse), CUDA.CuArray{Float32, 1, CUDA.DeviceMemory}, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}})
precompile(Tuple{typeof(GPUCompiler.actual_compilation), Base.Dict{Any, CUDA.CuFunction}, Core.MethodInstance, UInt64, GPUCompiler.CompilerConfig{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, typeof(CUDA.compile), typeof(CUDA.link)})
precompile(Tuple{GPUCompiler.var"##JuliaContext#154", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(GPUCompiler.JuliaContext), CUDA.var"#1145#1148"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.ThreadSafeContext, 1}, LLVM.ThreadSafeContext})
precompile(Tuple{typeof(Core.Compiler.abstract_call_known), GPUCompiler.GPUInterpreter, Any, Core.Compiler.ArgInfo, Core.Compiler.StmtInfo, Core.Compiler.InferenceState, Int64})
precompile(Tuple{CUDA.var"##s10306#1015", Any, Any, Any, Type, Any})
precompile(Tuple{typeof(LLVM.API.LLVMInt32TypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMModuleCreateWithNameInContext), String, LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMCreateEnumAttribute), LLVM.Context, UInt32, UInt64})
precompile(Tuple{typeof(LLVM.API.LLVMCreateBuilderInContext), LLVM.Context})
precompile(Tuple{Type{LLVM.CallInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.getproperty), Base.UnitRange{Int64}, Symbol})
precompile(Tuple{Type{LLVM.ConstantInt}, Int32})
precompile(Tuple{typeof(LLVM.API.LLVMIntTypeInContext), LLVM.Context, Int64})
precompile(Tuple{Type{LLVM.ConstantAsMetadata}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.API.LLVMMDNodeInContext2), LLVM.Context, Array{LLVM.Metadata, 1}, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMetadataAsValue2), LLVM.Context, LLVM.MDTuple})
precompile(Tuple{Type{LLVM.MetadataAsValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata), LLVM.CallInst, LLVM.MDKind, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.CallInst})
precompile(Tuple{Type{LLVM.RetInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Core.Compiler.var"#352#353", Any, Any, Any})
precompile(Tuple{typeof(Base.CoreLogging.min_enabled_level), Logging.ConsoleLogger})
precompile(Tuple{CUDA.var"##s10306#1059", Any})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.StructType})
precompile(Tuple{typeof(GPUCompiler.kernel_state_intr), LLVM.Module, LLVM.StructType})
precompile(Tuple{CUDA.var"##s10306#1058", Any, Any, Any})
precompile(Tuple{typeof(LLVM.API.LLVMInt8TypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.IntegerType})
precompile(Tuple{Type{LLVM.ConstantExpr}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.ptrtoint!), LLVM.IRBuilder, LLVM.ConstantExpr, LLVM.IntegerType})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.ConstantExpr})
precompile(Tuple{CUDA.var"##s10306#1008", Any, Any, Any})
precompile(Tuple{typeof(Base.reinterpret), Type{UInt32}, LLVM.API.__JL_Ctag_85})
precompile(Tuple{typeof(Base.convert), Type{Ptr{LLVM.API.LLVMOpaqueMetadata}}, Ptr{Nothing}})
precompile(Tuple{LLVM.Interop.var"##s708#14", Vararg{Any, 9}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Context, 1}, LLVM.Context})
precompile(Tuple{typeof(Base.convert), Type{LLVM.Context}, LLVM.Context})
precompile(Tuple{Type{LLVM.LLVMFloat}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.IntegerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.PointerType}, Ptr{LLVM.API.LLVMOpaqueType}})
precompile(Tuple{Type{LLVM.PointerType}, LLVM.LLVMFloat, Int64})
precompile(Tuple{typeof(Base.vect), LLVM.PointerType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.PointerType, LLVM.LLVMFloat, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.LLVMFloat, LLVM.IntegerType})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.PointerType}, Type{LLVM.LLVMType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.PointerType, LLVM.LLVMFloat, LLVM.IntegerType})
precompile(Tuple{typeof(LLVM.API.LLVMVoidTypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.VoidType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.API.LLVMModuleCreateWithNameInContext), String, LLVM.Context})
precompile(Tuple{typeof(LLVM.API.LLVMCreateEnumAttribute), LLVM.Context, UInt32, UInt64})
precompile(Tuple{typeof(LLVM.API.LLVMCreateBuilderInContext), LLVM.Context})
precompile(Tuple{Type{LLVM.BitCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.inbounds_gep!), LLVM.IRBuilder, LLVM.LLVMFloat, LLVM.BitCastInst, Array{LLVM.Argument, 1}})
precompile(Tuple{Type{LLVM.GetElementPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.StoreInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.Interop.tbaa_addrspace), Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMDStringInContext2), LLVM.Context, String, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMDNodeInContext2), LLVM.Context, Array{LLVM.MDString, 1}, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMIntTypeInContext), LLVM.Context, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.MDString, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.MDTuple, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Metadata, 1}, LLVM.ConstantInt, Int64})
precompile(Tuple{Type{LLVM.ConstantAsMetadata}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.API.LLVMMDNodeInContext2), LLVM.Context, Array{LLVM.Metadata, 1}, Int64})
precompile(Tuple{typeof(LLVM.API.LLVMMetadataAsValue2), LLVM.Context, LLVM.MDTuple})
precompile(Tuple{Type{LLVM.MetadataAsValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata), LLVM.StoreInst, LLVM.MDKind, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.alignment!), LLVM.StoreInst, Int64})
precompile(Tuple{Type{LLVM.RetInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.rem), Int32, Type{Int64}})
precompile(Tuple{typeof(Core.is_top_bit_set), Int32})
precompile(Tuple{LLVM.Interop.var"##s708#13", Vararg{Any, 8}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.PointerType, LLVM.IntegerType})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.PointerType, LLVM.IntegerType})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.LLVMFloat, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(LLVM.load!), LLVM.IRBuilder, LLVM.LLVMFloat, LLVM.GetElementPtrInst})
precompile(Tuple{Type{LLVM.LoadInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.API.LLVMSetMetadata), LLVM.LoadInst, LLVM.MDKind, LLVM.MetadataAsValue})
precompile(Tuple{typeof(LLVM.alignment!), LLVM.LoadInst, Int64})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.LoadInst})
precompile(Tuple{LLVM.Interop.var"##s708#15", Vararg{Any, 6}})
precompile(Tuple{LLVM.var"##Context#12", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{LLVM.Context}, LLVM.Interop.var"#16#18"{DataType, Int64, DataType}})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.PointerType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{Type{LLVM.IRBuilder}, Function})
precompile(Tuple{LLVM.var"##IRBuilder#49", Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{LLVM.IRBuilder}, LLVM.Interop.var"#17#19"{LLVM.Function, LLVM.PointerType, LLVM.PointerType}})
precompile(Tuple{typeof(LLVM.API.LLVMInt8TypeInContext), LLVM.Context})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.GetElementPtrInst})
precompile(Tuple{typeof(Base.cconvert), Type, LLVM.API.LLVMAtomicOrdering})
precompile(Tuple{typeof(Base.convert), Type{LLVM.API.LLVMAtomicOrdering}, LLVM.API.LLVMAtomicOrdering})
precompile(Tuple{typeof(Base.unsafe_convert), Type{LLVM.API.LLVMAtomicOrdering}, LLVM.API.LLVMAtomicOrdering})
precompile(Tuple{CUDA.var"##s10306#1048", Vararg{Any, 7}})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.PointerType}, Type{LLVM.LLVMFloat}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.PointerType, LLVM.LLVMFloat})
precompile(Tuple{typeof(LLVM.Interop.create_function), LLVM.LLVMFloat, Array{LLVM.LLVMType, 1}})
precompile(Tuple{Type{LLVM.AtomicRMWInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.ret!), LLVM.IRBuilder, LLVM.AtomicRMWInst})
precompile(Tuple{typeof(Base.something), Type, Type})
precompile(Tuple{typeof(Base.lastindex), Core.SimpleVector})
precompile(Tuple{typeof(Base.Iterators.enumerate), Core.SimpleVector})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Core.SimpleVector}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(>)), UInt64, UInt64})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.ThreadSafeContext, 1}})
precompile(Tuple{typeof(Base.last), Array{LLVM.ThreadSafeContext, 1}})
precompile(Tuple{typeof(LLVM.context), LLVM.ThreadSafeContext})
precompile(Tuple{typeof(LLVM.API.LLVMOrcCreateNewThreadSafeModule), LLVM.Module, LLVM.ThreadSafeContext})
precompile(Tuple{typeof(LLVM.tsm_callback), Ptr{Nothing}, Ptr{LLVM.API.LLVMOpaqueModule}})
precompile(Tuple{GPUCompiler.var"#65#68"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, LLVM.Module})
precompile(Tuple{typeof(Base.setindex!), LLVM.ModuleFlagDict, LLVM.ConstantAsMetadata, String, LLVM.API.LLVMModuleFlagBehavior})
precompile(Tuple{GPUCompiler.var"#lookup_fun#67"{Array{Any, 1}, Core.Compiler.WorldView{GPUCompiler.CodeCache}}, Core.MethodInstance, UInt64, UInt64})
precompile(Tuple{GPUCompiler.var"#66#69", LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.ci_cache_lookup), Core.Compiler.WorldView{GPUCompiler.CodeCache}, Core.MethodInstance, UInt64, UInt64})
precompile(Tuple{Type{NamedTuple{(:ci, :func, :specfunc), T} where T<:Tuple}, Tuple{Core.CodeInstance, String, String}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:ci, :func, :specfunc), Tuple{Core.CodeInstance, String, String}}, Symbol})
precompile(Tuple{typeof(LLVM.API.LLVMCreateStringAttribute), LLVM.Context, String, Int64, String, Int64})
precompile(Tuple{typeof(LLVM.name!), LLVM.Function, String})
precompile(Tuple{typeof(GPUCompiler.mangle_sig), Type})
precompile(Tuple{typeof(Base.rest), Core.SimpleVector, Int64})
precompile(Tuple{typeof(GPUCompiler.safe_name), Type{typeof(Main.rmse_kernel)}})
precompile(Tuple{typeof(Base.iterate), Core.SimpleVector})
precompile(Tuple{typeof(GPUCompiler.mangle_param), Type, Array{String, 1}})
precompile(Tuple{typeof(GPUCompiler.safe_name), DataType})
precompile(Tuple{typeof(Base.findnext), Base.Fix2{typeof(Base.isequal), String}, Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.string), Int64, String, Vararg{Any}})
precompile(Tuple{typeof(GPUCompiler.mangle_param), Int64, Array{String, 1}})
precompile(Tuple{typeof(Base.iterate), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.vect), Type{typeof(Main.rmse_kernel)}, Vararg{DataType}})
precompile(Tuple{typeof(Base.length), Array{DataType, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{DataType, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{Symbol, 1}}}}, Tuple{Int64}})
precompile(Tuple{Type{NamedTuple{(:cc, :typ, :name, :idx), T} where T<:Tuple}, Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Nothing}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.Iterators.Zip{Tuple{Array{DataType, 1}, Array{Symbol, 1}}}}, Tuple{Int64, Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:cc, :typ, :name, :idx), T} where T<:Tuple}, Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Int64}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Nothing}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Int64}}, Symbol})
precompile(Tuple{Type{LLVM.TypeAttribute}, String, LLVM.StructType})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTypeAttribute), LLVM.Context, UInt32, LLVM.StructType})
precompile(Tuple{typeof(LLVM.parameter_attributes), LLVM.Function, Int64})
precompile(Tuple{Type{LLVM.TypeAttribute}, String, LLVM.ArrayType})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTypeAttribute), LLVM.Context, UInt32, LLVM.ArrayType})
precompile(Tuple{typeof(Base.vect), LLVM.ConstantExpr})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LLVM.ConstantExpr, 1}}})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, GPUCompiler.Runtime.RuntimeMethodInstance, Array{LLVM.ConstantExpr, 1}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.LLVMType, 1}, LLVM.IntegerType, Int64})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.Value}, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.ConstantExpr, Int64})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.Value, 1}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.Value}})
precompile(Tuple{typeof(GPUCompiler.emit_trap!), GPUCompiler.CompilerJob{T, P} where P where T, LLVM.IRBuilder, LLVM.Module, LLVM.CallInst})
precompile(Tuple{Type{LLVM.AddrSpaceCastInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.AddrSpaceCastInst, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Any, Any}, Core.MethodInstance})
precompile(Tuple{typeof(GPUCompiler.finish_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, LLVM.Module, LLVM.Function})
precompile(Tuple{typeof(GPUCompiler.finish_module!), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, P} where P, LLVM.Module, LLVM.Function})
precompile(Tuple{GPUCompiler.var"#74#80", NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Nothing}}})
precompile(Tuple{GPUCompiler.var"#74#80", NamedTuple{(:cc, :typ, :name, :idx), Tuple{GPUCompiler.ArgumentCC, DataType, Symbol, Int64}}})
precompile(Tuple{GPUCompiler.var"#75#81", LLVM.EnumAttribute})
precompile(Tuple{typeof(LLVM.API.LLVMCreateTypeAttribute), LLVM.Context, UInt32, LLVM.VoidType})
precompile(Tuple{GPUCompiler.var"#75#81", LLVM.TypeAttribute})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.GetElementPtrInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.GetElementPtrInst, 1}, LLVM.GetElementPtrInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.GetElementPtrInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{Type{Array{LLVM.Instruction, 1}}, Array{LLVM.GetElementPtrInst, 1}})
precompile(Tuple{typeof(Base.isempty), Array{LLVM.Instruction, 1}})
precompile(Tuple{typeof(Base.popfirst!), Array{LLVM.Instruction, 1}})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{LLVM.LoadInst}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.LoadInst, 1}, LLVM.LoadInst, Int64})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{LLVM.LoadInst, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(LLVM.user), Tuple{Base.Broadcast.Extruded{Array{LLVM.Use, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.LoadInst, 1}})
precompile(Tuple{typeof(Base.append!), Array{LLVM.Instruction, 1}, Array{LLVM.GetElementPtrInst, 1}})
precompile(Tuple{typeof(Base.push!), Array{LLVM.LLVMType, 1}, LLVM.StructType})
precompile(Tuple{typeof(Base.push!), Array{LLVM.LLVMType, 1}, LLVM.ArrayType})
precompile(Tuple{typeof(LLVM.alloca!), LLVM.IRBuilder, LLVM.StructType})
precompile(Tuple{Type{LLVM.AllocaInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.addrspacecast!), LLVM.IRBuilder, LLVM.AllocaInst, LLVM.PointerType})
precompile(Tuple{typeof(Base.push!), Array{LLVM.Value, 1}, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(LLVM.alloca!), LLVM.IRBuilder, LLVM.ArrayType})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.Value, 1}, Int64})
precompile(Tuple{Type{Pair{A, B} where B where A}, LLVM.Argument, LLVM.AddrSpaceCastInst})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{LLVM.Value, LLVM.Value}, LLVM.AddrSpaceCastInst, LLVM.Argument})
precompile(Tuple{Type{LLVM.BrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(LLVM.replace_metadata_uses!), LLVM.Function, LLVM.ConstantExpr})
precompile(Tuple{LLVM.var"#recurse#15"{LLVM.Function, LLVM.ConstantExpr}, LLVM.NamedMDNode})
precompile(Tuple{Type{LLVM.MDTuple}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.MDTuple}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.MDTuple, 1}, LLVM.MDTuple, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#26#27"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.MDTuple, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.MDTuple, 1}}, Tuple{Int64}})
precompile(Tuple{LLVM.var"#recurse#15"{LLVM.Function, LLVM.ConstantExpr}, LLVM.MDTuple})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.ConstantAsMetadata}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.ConstantAsMetadata, 1}, LLVM.ConstantAsMetadata, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#24#25"}, Int64})
precompile(Tuple{Type{LLVM.MDString}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{LLVM.ConstantAsMetadata, 1}, LLVM.MDString, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{LLVM.Metadata, 1}, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#24#25"}, Int64, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.Metadata, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.Metadata, 1}}, Tuple{Int64}})
precompile(Tuple{Type{LLVM.Value}, LLVM.ConstantAsMetadata})
precompile(Tuple{typeof(LLVM.API.LLVMMetadataAsValue2), LLVM.Context, LLVM.ConstantAsMetadata})
precompile(Tuple{Type{LLVM.ConstantInt}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.Metadata, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.MDTuple, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{LLVM.DICompileUnit}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.DICompileUnit}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.DICompileUnit, 1}, LLVM.DICompileUnit, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#26#27"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.DICompileUnit, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.DICompileUnit, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.DICompileUnit, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{Type{Pair{A, B} where B where A}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String})
precompile(Tuple{Type{Base.Dict{GPUCompiler.CompilerJob{T, P} where P where T, String}}, Pair{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, String}})
precompile(Tuple{typeof(Base.lock), GPUCompiler.var"#140#142"{GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}}, Base.ReentrantLock})
precompile(Tuple{typeof(LLVM.API.LLVMParseBitcodeInContext2), LLVM.Context, LLVM.MemoryBuffer, Base.RefValue{Ptr{LLVM.API.LLVMOpaqueModule}}})
precompile(Tuple{typeof(Base.vect), LLVM.Function})
precompile(Tuple{Type{LLVM.MDNode}, Array{LLVM.Function, 1}})
precompile(Tuple{typeof(Base.push!), LLVM.NamedMDNode, LLVM.MDTuple})
precompile(Tuple{typeof(GPUCompiler.llvm_triple), GPUCompiler.PTXCompilerTarget})
precompile(Tuple{typeof(GPUCompiler.addTargetPasses!), LLVM.ModulePassManager, LLVM.TargetMachine, String})
precompile(Tuple{typeof(LLVM.module_pass_callback), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.cpu_features!)}})
precompile(Tuple{Type{Pair{A, B} where B where A}, String, Type})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, DataType}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Pair{String, DataType}, Int64, Int64})
precompile(Tuple{typeof(GPUCompiler.cpu_features!), LLVM.Module})
precompile(Tuple{typeof(LLVM.function_pass_callback), Ptr{Nothing}, Ptr{Nothing}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.lower_gc_frame!)}})
precompile(Tuple{typeof(GPUCompiler.lower_gc_frame!), LLVM.Function})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.add_kernel_state!)}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LLVM.LLVMType, 1}}})
precompile(Tuple{typeof(GPUCompiler.add_kernel_state!), LLVM.Module})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.MDTuple, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{LLVM.ConstantAsMetadata, 1}, Int64})
precompile(Tuple{Type{LLVM.Function}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.vect), LLVM.Function, Vararg{LLVM.Function}})
precompile(Tuple{Type{Base.Set{LLVM.Function}}, Array{LLVM.Function, 1}})
precompile(Tuple{GPUCompiler.var"#check_user#84"{Base.Set{LLVM.Function}, Array{LLVM.Function, 1}}, LLVM.CallInst})
precompile(Tuple{typeof(Base.vect), LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.IntegerType})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.StructType, LLVM.IntegerType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.PointerType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{typeof(Base.vect), LLVM.StructType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.StructType, 1}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.PointerType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.StructType}, Type{LLVM.LLVMType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.StructType, LLVM.PointerType, LLVM.IntegerType})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.IntegerType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.LLVMType}, LLVM.StructType, LLVM.IntegerType, LLVM.IntegerType, Vararg{LLVM.IntegerType}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#108#109"{Array{LLVM.LLVMType, 1}}, Int64, LLVM.StructType, Vararg{LLVM.IntegerType, 4}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.StructType, LLVM.ArrayType, Vararg{LLVM.ArrayType}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ArrayType, LLVM.ArrayType})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.StructType}, Type{LLVM.SequentialType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.SequentialType}, LLVM.StructType, LLVM.StructType, LLVM.StructType, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#108#109"{Array{LLVM.SequentialType, 1}}, Int64, LLVM.StructType, LLVM.StructType, LLVM.StructType, LLVM.StructType, LLVM.ArrayType, LLVM.ArrayType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.VoidType, Array{LLVM.SequentialType, 1}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#108#109"{Array{LLVM.LLVMType, 1}}, Int64, LLVM.StructType, LLVM.IntegerType, LLVM.IntegerType, LLVM.IntegerType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.IntegerType, Array{LLVM.LLVMType, 1}})
precompile(Tuple{Type{NamedTuple{(:value_map, :materializer, :changes), T} where T<:Tuple}, Tuple{Base.Dict{LLVM.Value, LLVM.Value}, GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.API.LLVMCloneFunctionChangeType}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:value_map, :materializer, :changes), Tuple{Base.Dict{LLVM.Value, LLVM.Value}, GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.API.LLVMCloneFunctionChangeType}}, typeof(LLVM.clone_into!), LLVM.Function, LLVM.Function})
precompile(Tuple{Type{Base.RefValue{T} where T}, GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}})
precompile(Tuple{typeof(LLVM.API.LLVMCloneFunctionInto), LLVM.Function, LLVM.Function, Array{LLVM.Value, 1}, Int64, LLVM.API.LLVMCloneFunctionChangeType, String, Ptr{Nothing}, Ptr{Nothing}, Ptr{Nothing}, Base.RefValue{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}}})
precompile(Tuple{typeof(LLVM.materializer_callback), Ptr{LLVM.API.LLVMOpaqueValue}, Base.RefValue{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}}})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.Function})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.ConstantInt})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.ConstantExpr})
precompile(Tuple{Type{LLVM.GlobalVariable}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.GlobalVariable})
precompile(Tuple{Type{LLVM.ConstantFP}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.ConstantFP})
precompile(Tuple{Type{LLVM.PointerNull}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.PointerNull})
precompile(Tuple{Type{LLVM.InlineAsm}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.InlineAsm})
precompile(Tuple{typeof(Base._array_for), Type{LLVM.MDString}, Base.HasShape{1}, Tuple{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{LLVM.MDString, 1}, LLVM.MDString, Base.Generator{Array{Ptr{LLVM.API.LLVMOpaqueMetadata}, 1}, LLVM.var"#24#25"}, Int64})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.MDString, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.MDString, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.MDString, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{LLVM.ConstantAsMetadata, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.ConstantAsMetadata, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{LLVM.ConstantAsMetadata, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{LLVM.Value, 1}}})
precompile(Tuple{typeof(Base.unsigned), UInt32})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{LLVM.LLVMType, 1}, Array{LLVM.Value, 1}}}, Int64})
precompile(Tuple{typeof(Core.Compiler.eltype), Type{Array{Base.HasShape{1}, 1}}})
precompile(Tuple{GPUCompiler.var"#rewrite_uses!#86"{LLVM.FunctionType, LLVM.Function}, LLVM.Function, LLVM.FunctionType})
precompile(Tuple{GPUCompiler.var"#rewrite_uses!#86"{LLVM.FunctionType, LLVM.Function}, LLVM.ConstantExpr, LLVM.FunctionType})
precompile(Tuple{typeof(LLVM.called_operand), LLVM.CallInst})
precompile(Tuple{Type{LLVM.ZExtInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.ZExtInst, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.CallInst, Int64})
precompile(Tuple{Type{LLVM.MulInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.MulInst, Int64})
precompile(Tuple{typeof(Base.vect), LLVM.CallInst, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.CallInst, LLVM.ZExtInst, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ZExtInst, LLVM.CallInst, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.CallInst, LLVM.MulInst})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.ZExtInst}, Type{LLVM.Instruction}})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.CallInst}, Type{LLVM.Instruction}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.Instruction}, LLVM.CallInst, LLVM.ZExtInst, LLVM.CallInst, Vararg{Any}})
precompile(Tuple{typeof(Base.afoldl), Base.var"#108#109"{Array{LLVM.Instruction, 1}}, Int64, LLVM.CallInst, LLVM.ZExtInst, LLVM.CallInst, LLVM.MulInst})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.Instruction, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{typeof(LLVM.callconv!), LLVM.CallInst, UInt32})
precompile(Tuple{typeof(Base.vect), LLVM.CallInst})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.CallInst, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.CallInst, LLVM.ConstantExpr})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.User}, LLVM.CallInst, LLVM.ConstantExpr})
precompile(Tuple{typeof(LLVM.call!), LLVM.IRBuilder, LLVM.FunctionType, LLVM.Function, Array{LLVM.User, 1}, LLVM.OperandBundleIterator})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.lower_kernel_state!)}})
precompile(Tuple{typeof(GPUCompiler.lower_kernel_state!), LLVM.Function})
precompile(Tuple{typeof(Base.:(==)), LLVM.StructType, LLVM.StructType})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.cleanup_kernel_state!)}})
precompile(Tuple{typeof(GPUCompiler.cleanup_kernel_state!), LLVM.Module})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.lower_ptls!)}})
precompile(Tuple{typeof(GPUCompiler.lower_ptls!), LLVM.Module})
precompile(Tuple{typeof(LLVM.unsafe_delete!), LLVM.BasicBlock, LLVM.CallInst})
precompile(Tuple{typeof(Base.iterate), Array{LLVM.Attribute, 1}})
precompile(Tuple{typeof(Base.iterate), Array{LLVM.Attribute, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.nvvm_reflect!)}})
precompile(Tuple{typeof(GPUCompiler.nvvm_reflect!), LLVM.Function})
precompile(Tuple{Type{LLVM.ConstantDataArray}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.collect), LLVM.ConstantDataArray})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.ConstantInt, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.RefValue{DataType}, Array{LLVM.Value, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.convert), Tuple{Base.RefValue{DataType}, Array{LLVM.Value, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(Base.convert), Tuple{Base.RefValue{DataType}, Array{LLVM.Value, 1}}}})
precompile(Tuple{typeof(Base.convert), Type{UInt8}, LLVM.ConstantInt})
precompile(Tuple{typeof(Base.similar), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{DataType}, Base.Broadcast.Extruded{Array{LLVM.Value, 1}, Tuple{Bool}, Tuple{Int64}}}}, Type{UInt8}})
precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!), Array{UInt8, 1}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Tuple{Base.OneTo{Int64}}, typeof(Base.convert), Tuple{Base.RefValue{DataType}, Base.Broadcast.Extruded{Array{LLVM.Value, 1}, Tuple{Bool}, Tuple{Int64}}}}, Base.OneTo{Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.lastindex), Array{UInt8, 1}})
precompile(Tuple{typeof(Base.getindex), Array{UInt8, 1}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getproperty), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, Symbol})
precompile(Tuple{typeof(Base.getproperty), GPUCompiler.CompilerConfig{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, Symbol})
precompile(Tuple{typeof(Base.getproperty), GPUCompiler.PTXCompilerTarget, Symbol})
precompile(Tuple{typeof(Base.:(*)), UInt32, Int64})
precompile(Tuple{Type{LLVM.ConstantInt}, LLVM.IntegerType, Int64})
precompile(Tuple{Type{LLVM.UnreachableInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SwitchInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.setindex!), Base.RefValue{Ptr{Nothing}}, Nothing})
precompile(Tuple{typeof(GPUCompiler.check_ir), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, LLVM.Module})
precompile(Tuple{Type{LLVM.InsertValueInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ExtractValueInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.IntToPtrInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.in), LLVM.CallInst, Base.Set{LLVM.Instruction}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.Instruction}, LLVM.CallInst})
precompile(Tuple{Type{LLVM.DILocation}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{Type{LLVM.DISubProgram}, Ptr{LLVM.API.LLVMOpaqueMetadata}})
precompile(Tuple{typeof(LLVM.line), LLVM.DILocation})
precompile(Tuple{Type{Base.Set{LLVM.DILocation}}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.DILocation}, LLVM.DILocation})
precompile(Tuple{typeof(Base._unique!), GPUCompiler.var"#149#152", Array{LLVM.Use, 1}, Array{LLVM.Use, 1}, Base.Set{LLVM.DILocation}, Int64})
precompile(Tuple{typeof(Base.:(∉)), LLVM.DILocation, Base.Set{LLVM.DILocation}})
precompile(Tuple{Type{LLVM.AddInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ICmpInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SelectInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.ShlInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.PHIInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SDivInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SubInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.in), LLVM.LoadInst, Base.Set{LLVM.Instruction}})
precompile(Tuple{typeof(Base.push!), Base.Set{LLVM.Instruction}, LLVM.LoadInst})
precompile(Tuple{Type{LLVM.FSubInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FMulInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SIToFPInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.FDivInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.UDivInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.AtomicCmpXchgInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.XorInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SExtInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.URemInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{LLVM.SRemInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{NamedTuple{(:entry, :compiled), T} where T<:Tuple}, Tuple{LLVM.Function, Base.Dict{Any, Any}}})
precompile(Tuple{typeof(Base.getindex), Base.RefValue{typeof(GPUCompiler.resolve_cpu_references!)}})
precompile(Tuple{typeof(GPUCompiler.resolve_cpu_references!), LLVM.Module})
precompile(Tuple{typeof(GPUCompiler.mcgen), GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, LLVM.Module, LLVM.API.LLVMCodeGenFileType})
precompile(Tuple{Type{NamedTuple{(:ir,), T} where T<:Tuple}, Tuple{LLVM.Module}})
precompile(Tuple{Base.var"##s92#239", Vararg{Any, 5}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:ir,), Tuple{LLVM.Module}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:entry, :compiled), Tuple{LLVM.Function, Base.Dict{Any, Any}}}, NamedTuple{(:ir,), Tuple{LLVM.Module}}})
precompile(Tuple{typeof(Base.pop!), Array{LLVM.ThreadSafeContext, 1}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:entry, :compiled, :ir), Tuple{LLVM.Function, Base.Dict{Any, Any}, LLVM.Module}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), CUDA.CUDACompilerParams, Symbol})
precompile(Tuple{typeof(Base.string), String, UInt32, Vararg{Any}})
precompile(Tuple{typeof(Base.vect), Type{CUDA.KernelState}, Vararg{DataType}})
precompile(Tuple{typeof(Base.filter), CUDA.var"#1147#1150", Array{DataType, 1}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.:(+)), Type{DataType}})
precompile(Tuple{typeof(Base.reduce_empty), typeof(Base.add_sum), Type{DataType}})
precompile(Tuple{typeof(Base.sum), Function, Array{DataType, 1}})
precompile(Tuple{Type{UInt16}, UInt32})
precompile(Tuple{typeof(Base.:(~)), UInt16})
precompile(Tuple{typeof(Base._mapreduce_dim), Function, Function, Base._InitialValue, Array{DataType, 1}, Base.Colon})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.sizeof), typeof(Base.add_sum)}, Type{DataType}})
precompile(Tuple{typeof(Base._mapreduce), typeof(Base.sizeof), typeof(Base.add_sum), Base.IndexLinear, Array{DataType, 1}})
precompile(Tuple{typeof(CUDA_Runtime_jll.ptxas)})
precompile(Tuple{CUDA_Runtime_jll.var"##ptxas#12", Bool, Bool, typeof(CUDA_Runtime_jll.ptxas)})
precompile(Tuple{typeof(JLLWrappers.adjust_ENV!), Base.Dict{K, V} where V where K, String, String, Bool, Bool})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{Base.Cmd}, Tuple{Array{String, 1}}}})
precompile(Tuple{typeof(Base.setup_stdio), Base.Pipe, Bool})
precompile(Tuple{typeof(Base.setproperty!), Base.Process, Symbol, Base.DevNull})
precompile(Tuple{CUDA.var"#1089#1091"})
precompile(Tuple{CUDA.var"#1151#1152"{Base.Pipe}})
precompile(Tuple{typeof(Base.strip), String})
precompile(Tuple{typeof(Base.strip), Base.SubString{String}})
precompile(Tuple{typeof(Base.isempty), Base.SubString{String}})
precompile(Tuple{typeof(LLVM.name), LLVM.Function})
precompile(Tuple{Type{NamedTuple{(:image, :entry), T} where T<:Tuple}, Tuple{Array{UInt8, 1}, String}})
precompile(Tuple{Type{NamedTuple{(:threads, :blocks), T} where T<:Tuple}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:threads, :blocks), Tuple{Int64, Int64}}, CUDA.HostKernel{typeof(Main.rmse_kernel), Tuple{CUDA.CuDeviceArray{Float32, 1, 1}, CUDA.CuDeviceArray{Float32, 3, 1}, CUDA.CuDeviceArray{Float32, 3, 1}, Base.IteratorsMD.CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}}}, CUDA.CuArray{Float32, 1, CUDA.DeviceMemory}, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}, Base.IteratorsMD.CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}, Base.IteratorsMD.CartesianIndices{3, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}, Base.OneTo{Int64}}}})
precompile(Tuple{typeof(BenchmarkTools.prunekwargs), Any})
precompile(Tuple{typeof(Base.Iterators.drop), Tuple{Expr}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Iterators.Drop{Tuple{Expr}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Array{Expr, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.gensym)})
precompile(Tuple{typeof(BenchmarkTools.hasevals), Array{Expr, 1}})
precompile(Tuple{typeof(BenchmarkTools.benchmarkable_parts), Any})
precompile(Tuple{typeof(Base.deleteat!), Array{Expr, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Nothing, Nothing, Array{Symbol, 1}, Array{Expr, 1}, Array{Expr, 1}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Expr, Nothing, Nothing, Array{Symbol, 1}, Array{Expr, 1}, Array{Expr, 1}}, Int64, Int64})
precompile(Tuple{typeof(Base.map!), typeof(Base.esc), Array{Expr, 1}, Array{Expr, 1}})
precompile(Tuple{typeof(BenchmarkTools.collectvars), Expr})
precompile(Tuple{typeof(Base.filter), BenchmarkTools.var"#59#60"{Array{Any, 1}}, Array{Symbol, 1}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Type, Symbol, Array{Expr, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Type{Expr}, Tuple{Base.RefValue{Symbol}, Array{Expr, 1}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Type{Expr}, Tuple{Base.RefValue{Symbol}, Array{Expr, 1}}}})
precompile(Tuple{Type{BenchmarkTools.Parameters}})
precompile(Tuple{typeof(BenchmarkTools.generate_benchmark_definition), Vararg{Any, 9}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, BenchmarkTools.var"#61#63", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.UnitRange{Int64}, BenchmarkTools.var"#61#63"}})
precompile(Tuple{typeof(Base.vcat), Array{Symbol, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.Iterators.zip), Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, BenchmarkTools.var"#62#64", Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Symbol, 1}}}})
precompile(Tuple{Base.Iterators.var"#5#6"{Tuple{Array{Any, 1}, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Zip{Tuple{Array{Any, 1}, Array{Symbol, 1}}}, BenchmarkTools.var"#62#64"}})
precompile(Tuple{typeof(Base.ntuple), Base.var"#73#74"{Tuple{Expr}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{Type{BenchmarkTools.Benchmark}, Function, Tuple{}, BenchmarkTools.Parameters})
precompile(Tuple{typeof(BenchmarkTools.tune!), BenchmarkTools.Benchmark})
precompile(Tuple{typeof(BenchmarkTools._lineartrial), BenchmarkTools.Benchmark, BenchmarkTools.Parameters})
precompile(Tuple{Type{NamedTuple{(:blocking,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Core.Compiler.var"#376#377", Any})
precompile(Tuple{Main.var"###sample#364", Tuple{}, BenchmarkTools.Parameters})
precompile(Tuple{Type{Ref{NTuple{32, UInt8}}}, NTuple{32, Int64}})
precompile(Tuple{typeof(Base.first), Tuple{Float64, Float64, Int64, Int64, Nothing}})
precompile(Tuple{typeof(Base.setindex!), Array{Float64, 1}, Float64, Int64})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.min)}, Type{Float64}})
precompile(Tuple{typeof(Base.minimum), Array{Float64, 1}})
precompile(Tuple{typeof(BenchmarkTools.guessevals), Int64})
precompile(Tuple{typeof(Base.setproperty!), BenchmarkTools.Parameters, Symbol, Int64})
precompile(Tuple{Type{NamedTuple{(:warmup,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:warmup,), Tuple{Bool}}, typeof(Base.run), BenchmarkTools.Benchmark})
precompile(Tuple{Type{NamedTuple{(:evals,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:warmup,), Tuple{Bool}}, typeof(BenchmarkTools._run), BenchmarkTools.Benchmark, BenchmarkTools.Parameters})
precompile(Tuple{typeof(Base.ntuple), Base.var"#73#74"{Tuple{Float64, Float64, Int64, Int64, Nothing}, Base.UnitRange{Int64}}, Int64})
precompile(Tuple{typeof(Base.push!), BenchmarkTools.Trial, Float64, Float64, Int64, Int64})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Pair{Symbol, Array{Tuple{String, Int64}, 1}}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Pair{Symbol, Module}})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Pair{Symbol, Bool}, Pair{Symbol, Module}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.PipeEndpoint}, String})
precompile(Tuple{Type{NamedTuple{(:init,), T} where T<:Tuple}, Tuple{Base.IOContext{Base.PipeEndpoint}}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:init,), Tuple{Base.IOContext{Base.PipeEndpoint}}}, typeof(Base.foldl), Type, Base.Dict{Symbol, Any}})
precompile(Tuple{Base.var"##mapfoldl#288", Base.IOContext{Base.PipeEndpoint}, typeof(Base.mapfoldl), Function, Type, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.mapfoldl_impl), typeof(Base.identity), Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.IOContext{Base.PipeEndpoint}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.get), NamedTuple{(), Tuple{}}, Symbol, Base.Missing})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, NamedTuple{(:lo,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:lo,), Tuple{Int64}}, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{NamedTuple{(:lo,), Tuple{Int64}}, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.get), NamedTuple{(:lo,), Tuple{Int64}}, Symbol, Base.Missing})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:scratch,), Tuple{Nothing}}}})
precompile(Tuple{typeof(Base._nt_names), Type{NamedTuple{(:lo, :hi, :scratch), Tuple{Int64, Int64, Array{UInt64, 1}}}}})
precompile(Tuple{typeof(Base.:(-)), Int64, Float64})
precompile(Tuple{typeof(Base.reduce_empty), Base.MappingRF{typeof(Base.identity), typeof(Base.max)}, Type{Float64}})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex), Int64, Int64})
precompile(Tuple{Type{NamedTuple{(:type,), T} where T<:Tuple}, Tuple{DataType}})
precompile(Tuple{typeof(Base.convert), Type{CUDA.CuPtr{Int64}}, CUDA.CuPtr{Nothing}})
precompile(Tuple{Type{NamedTuple{(:async,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:copycols,), T} where T<:Tuple}, Tuple{Bool}})
precompile(Tuple{Type{NamedTuple{(:max_threads,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(CUDA.cudaconvert), Int64})
precompile(Tuple{Type{Base.Pairs{Symbol, V, I, A} where A where I where V}, NamedTuple{(:name,), Tuple{Nothing}}, Tuple{Symbol}})
precompile(Tuple{Base.Iterators.var"#10#11"{Tuple{Base.StepRange{Int64, Int64}, Base.UnitRange{Int64}}}, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Char})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.identity), Tuple{Char}})
precompile(Tuple{Type{NamedTuple{(:sigdigits,), T} where T<:Tuple}, Tuple{Int64}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:sigdigits,), Tuple{Int64}}})
precompile(Tuple{typeof(Base.isempty), Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.PipeEndpoint}, Base.Multimedia.MIME{Symbol("text/plain")}, BenchmarkTools.Trial})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.PipeEndpoint}, Int64})
precompile(Tuple{typeof(BenchmarkTools.bindata), Array{Float64, 1}, Int64, Float64, Float64})
precompile(Tuple{typeof(Base.maybeview), Array{Int64, 1}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Int64}}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base._array_for), Type{Int64}, Base.HasShape{2}, Tuple{Base.OneTo{Int64}, Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Int64, 2}, Int64, Base.Generator{Base.Iterators.ProductIterator{Tuple{Base.StepRange{Int64, Int64}, Base.UnitRange{Int64}}}, BenchmarkTools.var"#5#7"{Array{Char, 1}}}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{typeof(Base.map), Function, Array{Int64, 2}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, BenchmarkTools.var"#6#8"{Array{Char, 1}}, Array{Int64, 2}})
precompile(Tuple{typeof(Base.collect_similar), Array{Int64, 2}, Base.Generator{Array{Int64, 2}, BenchmarkTools.var"#6#8"{Array{Char, 1}}}})
precompile(Tuple{typeof(Base.lastindex), Array{Char, 2}, Int64})
precompile(Tuple{typeof(Base.Broadcast.dotview), Array{Char, 2}, Function, Int64})
precompile(Tuple{typeof(Base.Broadcast.materialize!), Base.SubArray{Char, 1, Array{Char, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Int64}, true}, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Base.identity), Tuple{Char}}})
precompile(Tuple{typeof(Base.:(/)), Float64, Int64})
precompile(Tuple{typeof(Base.:(>)), Float64, Int64})
precompile(Tuple{typeof(Base.round), Type{Int64}, Float64})
precompile(Tuple{typeof(Base.axes), Array{Char, 2}, Int64})
precompile(Tuple{typeof(Base.view), Array{Char, 2}, Int64, Function})
precompile(Tuple{typeof(Base.Iterators.enumerate), Base.SubArray{Char, 1, Array{Char, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.SubArray{Char, 1, Array{Char, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Int64}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.PipeEndpoint}, Char})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Base.SubArray{Char, 1, Array{Char, 2}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}}, true}}, Tuple{Int64, Tuple{Base.OneTo{Int64}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Array{Float64, 1}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}, typeof(Base.round)}, Tuple{Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}, typeof(Base.round)}, Tuple{Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(BenchmarkTools.prettytime), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}, typeof(Base.round)}, Tuple{Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BenchmarkTools.prettytime), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}, typeof(Base.round)}, Tuple{Array{Float64, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, BenchmarkTools.var"#remtrailingzeros#15", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BenchmarkTools.prettytime), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}, typeof(Base.round)}, Tuple{Array{Float64, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, BenchmarkTools.var"#remtrailingzeros#15", Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, typeof(BenchmarkTools.prettytime), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, Base.Broadcast.var"#43#44"{Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:sigdigits,), Tuple{Int64}}}, typeof(Base.round)}, Tuple{Array{Float64, 1}}}}}}}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{String, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.:(^)), String, Int64})
precompile(Tuple{typeof(Base.lpad), String, Int64})
precompile(Tuple{typeof(Base.println), Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{typeof(REPL.LineEdit.history_prev_prefix), REPL.LineEdit.PrefixSearchState, REPL.REPLHistoryProvider, AbstractString})
precompile(Tuple{typeof(Pkg.API.activate), String})
precompile(Tuple{Pkg.API.var"##activate#296", Bool, Bool, Base.IOContext{Base.PipeEndpoint}, typeof(Pkg.API.activate), String})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Pkg.Types.Compat}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{Base.UUID, Pkg.Types.PackageEntry}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.map), typeof(tuple), Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.ident_cmp), Tuple{UInt64}, Tuple{UInt64}})
precompile(Tuple{typeof(Pkg.API.instantiate)})
precompile(Tuple{typeof(Pkg.Registry.download_default_registries), Base.IOContext{Base.PipeEndpoint}})
precompile(Tuple{typeof(NVTX.file_lineno), LineNumberNode})
precompile(Tuple{typeof(Base.string), Expr, String, String})
precompile(Tuple{typeof(NVTX.domain_attrs), Module, String, Tuple{}})
precompile(Tuple{typeof(Base.indexed_iterate), NTuple{5, Expr}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NTuple{5, Expr}, Int64, Int64})
precompile(Tuple{GPUCompiler.CodeCacheCallback, Core.MethodInstance, UInt32})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, CUDA.CUPTI.var"#232#233", Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base._similar_shape), Base.Generator{Base.UnitRange{Int64}, CUDA.CUPTI.var"#232#233"}, Base.HasShape{1}})
precompile(Tuple{typeof(Base.cconvert), Type{UInt32}, CUDA.CUPTI.CUpti_ActivityFlag})
precompile(Tuple{typeof(CUDA.CUPTI.request_buffer), Ptr{Ptr{UInt8}}, Ptr{UInt64}, Ptr{UInt64}})
precompile(Tuple{typeof(CUDA.CUPTI.complete_buffer), Ptr{CUDA.CUctx_st}, UInt32, Ptr{UInt8}, UInt64, UInt64})
precompile(Tuple{typeof(CUDA.Profile.detect_cupti)})
precompile(Tuple{Type{CUDA.CUPTI.CUPTIError}, CUDA.CUPTI.CUptiResult})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:maxlog,), Tuple{Int64}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{Base.var"##invokelatest#2", Base.Pairs{Symbol, Int64, Tuple{Symbol}, NamedTuple{(:maxlog,), Tuple{Int64}}}, typeof(Base.invokelatest), Any, Any, Vararg{Any}})
precompile(Tuple{typeof(Core.kwcall), Any, typeof(Base.CoreLogging.handle_message), Logging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.get!), Base.Dict{Any, Int64}, Symbol, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Int64}, Int64, Symbol})
precompile(Tuple{typeof(Base.something), UInt32, Int64})
precompile(Tuple{typeof(CUDA.Profile.profile_externally), Main.var"##10#profiled_code"})
precompile(Tuple{typeof(CUDA.unsafe_free!), CUDA.CuArray{Float32, 1, CUDA.DeviceMemory}})
precompile(Tuple{typeof(Base.convert), Type{Ptr{CUDA.CUstream_st}}, Ptr{Nothing}})
precompile(Tuple{typeof(CUDA.pool_free), CUDA.Managed{CUDA.DeviceMemory}})
precompile(Tuple{typeof(CUDA.unsafe_free!), CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}})
precompile(Tuple{typeof(Base.cmd_gen), Tuple{Tuple{String}, Tuple{Base.SubString{String}}, Tuple{Base.SubString{String}}}})
precompile(Tuple{typeof(Main.rmse), CUDA.CuArray{Float32, 1, CUDA.DeviceMemory}, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}, CUDA.CuArray{Float32, 3, CUDA.DeviceMemory}})
precompile(Tuple{typeof(Core.Compiler.return_type), Core.Compiler.NativeInterpreter, DataType})
precompile(Tuple{typeof(Core.Compiler.typeinf_type), Core.Compiler.NativeInterpreter, Method, Any, Core.SimpleVector})
precompile(Tuple{typeof(Base.convert), Type{UInt32}, UInt16})
precompile(Tuple{typeof(Base.rem), UInt8, Type{UInt32}})
precompile(Tuple{typeof(Core.is_top_bit_set), Int8})
precompile(Tuple{typeof(Base.convert), Type{NTuple{4, Symbol}}, NTuple{4, Symbol}})
precompile(Tuple{typeof(Base.hashindex), Core.MethodInstance, Int64})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.StructType}, Type{LLVM.PointerType}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.SequentialType}, LLVM.StructType, LLVM.PointerType})
precompile(Tuple{Type{LLVM.FunctionType}, LLVM.PointerType, Array{LLVM.SequentialType, 1}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.PointerType, LLVM.PointerType})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.SequentialType}, LLVM.StructType, LLVM.PointerType, LLVM.PointerType})
precompile(Tuple{Type{LLVM.UndefValue}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{GPUCompiler.var"#materializer#85"{Base.Dict{LLVM.Function, LLVM.Function}, LLVM.StructType}, LLVM.UndefValue})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.CallInst, LLVM.ConstantExpr, Vararg{Any}})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ConstantExpr, LLVM.CallInst})
precompile(Tuple{typeof(Base.promote_type), Type{LLVM.CallInst}, Type{LLVM.User}})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.User}, LLVM.CallInst, LLVM.ConstantExpr, LLVM.CallInst})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.LoadInst, Int64})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.CallInst, LLVM.LoadInst})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.Instruction}, LLVM.CallInst, LLVM.LoadInst})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.AddInst, Int64})
precompile(Tuple{typeof(Base.promote_typeof), LLVM.ConstantExpr, LLVM.AddInst})
precompile(Tuple{typeof(Base.getindex), Type{LLVM.User}, LLVM.CallInst, LLVM.ConstantExpr, LLVM.AddInst})
precompile(Tuple{Type{LLVM.PtrToIntInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{typeof(Base.length), Core.SimpleVector})
precompile(Tuple{typeof(Base.last), Core.SimpleVector})
precompile(Tuple{typeof(Base.setindex!), Array{LLVM.Value, 1}, LLVM.GetElementPtrInst, Int64})
precompile(Tuple{Type{LLVM.AndInst}, Ptr{LLVM.API.LLVMOpaqueValue}})
precompile(Tuple{Type{Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}}, Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}, 1}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(∉)), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}}})
precompile(Tuple{typeof(Base.:(∉)), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Method}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}}})
precompile(Tuple{typeof(Base.convert), Type{Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}, Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Method}})
precompile(Tuple{typeof(Base._unique!), typeof(Base.identity), Array{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}, 1}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}, Int64, Int64})
precompile(Tuple{typeof(Base.:(∉)), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, String}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}, Tuple{String, Array{Base.StackTraces.StackFrame, 1}, String}})
precompile(Tuple{typeof(Base.hashindex), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, String}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}, Int64})
precompile(Tuple{typeof(Base.hashindex), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Method}, Int64})
precompile(Tuple{typeof(Base.:(∉)), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}})
precompile(Tuple{typeof(Base.push!), Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}, Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Symbol}})
precompile(Tuple{typeof(Base.:(∉)), Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Method}, Base.Set{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}}})
precompile(Tuple{Type{GPUCompiler.InvalidIRError}, GPUCompiler.CompilerJob{GPUCompiler.PTXCompilerTarget, CUDA.CUDACompilerParams}, Array{Tuple{String, Array{Base.StackTraces.StackFrame, 1}, Any}, 1}})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{LoadError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Symbol})
precompile(Tuple{Type{NamedTuple{(:exception, :backtrace), T} where T<:Tuple}, Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}}, Symbol})
precompile(Tuple{typeof(Base.display_error), Base.IOContext{Base.PipeEndpoint}, Base.ExceptionStack})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:bold, :color), Tuple{Bool, Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.PipeEndpoint}, String})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{LoadError, Array{Base.StackTraces.StackFrame, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.PipeEndpoint}, LoadError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.PipeEndpoint}, GPUCompiler.InvalidIRError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.PipeEndpoint}, Core.MethodInstance})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:use_color,), Tuple{Bool}}, typeof(Base.print_type_bicolor), Base.IOContext{Base.PipeEndpoint}, Type})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Method, Vararg{Any}})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Method})
precompile(Tuple{typeof(Base.string_with_env), Base.ImmutableDict{Symbol, Any}, Type})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Base.ImmutableDict{Symbol, Any}}}, typeof(Base.sprint), Function, Type, Vararg{Any}})
precompile(Tuple{Base.var"##sprint#484", Base.ImmutableDict{Symbol, Any}, Int64, typeof(Base.sprint), Function, Type, Vararg{Any}})
precompile(Tuple{typeof(Base.show_signature_function), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Any, Bool, String, Bool})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Core.TypeofBottom})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Tuple{}})
precompile(Tuple{REPL.LineEdit.var"#27#28"{REPL.LineEdit.var"#119#175", String}, Any, Any})
precompile(Tuple{REPL.LineEdit.var"#119#175", REPL.LineEdit.MIState, Any, Vararg{Any}})
precompile(Tuple{REPL.LineEdit.var"##edit_abort#113", Any, typeof(REPL.LineEdit.edit_abort), REPL.LineEdit.MIState, Bool})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Nothing, Int64}, Int64, Int64})
precompile(Tuple{REPL.var"#60#66"{REPL.REPLBackendRef}})
precompile(Tuple{typeof(NVTX.destroy), NVTX.Domain})
precompile(Tuple{CUDA.CURAND.var"#106#110"{NamedTuple{(:device, :context, :stream, :math_mode, :math_precision), Tuple{CUDA.CuDevice, CUDA.CuContext, CUDA.CuStream, CUDA.MathMode, Symbol}}, CUDA.CURAND.RNG}, Task})
precompile(Tuple{typeof(CUDA.CURAND.unsafe_destroy!), CUDA.CURAND.RNG})
